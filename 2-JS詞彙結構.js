//!               Javascript 詞彙結構
//!#################################################
/*
?[詞彙結構是甚麼？]
* 詞彙結構(lexical structure) - 程式的基本規則, 為最底層的語法

?[程式中的文字]
* JS區分大小寫(case-sensitive)
* JS會忽略出現在詞彙單元(tokens)中的空格(JS也會把tabs等空格字元視為空白)
* JS大部分情況會忽略分行符號(lines breaks)(有少數例外)

?[註解]
* //單行
* //單行 & 多行

?[字面值]
* 字面值(或稱直接量, literal), 是直接出現在程式中的值, 可直接使用
* 如數字, 字串, 布林值, 正規表達式直接量, 空值

?[識別字與表留字]
* 識別字(或稱標示符, identfier), 就是一個名稱, 可做為變數, 函式的命名
* 識別字必須以英文字母, 底線或錢幣符號開頭(數字不行)
* 保留字(reserved words)不可作為識別字, 為語言保留給自身使用

?[Unicode]
* Javascript是使用Unicode字元集(ASCII & latin-1之超集)撰寫的
* 某些電腦無法處理完整的Unicode字元集, JS定義了轉義序列(escape sequences), 僅使用ASCII字元來寫出Unicode字元
~ "café" // => 使用Unicode字元
~ "caf\u00e9" // => 使用轉義字元 + ASCII字元 來寫出Unicode字元
~ "caf\u{E9}" // => 相同轉義序列的另一個形式(ES6引進, 以支持超過16位元(1個16進制 = 4位元 * 4)的Unicode編碼, 如笑臉表情"\u{1F600}")
* Unicode的常態化: 同一個非ASCII字元, 可能會有2種以上編碼方式
*   é 可用\u00e9或 ascii-e + \u0301尖音組合符號
*   他們在文字編輯器上顯示完全相同, 但有著不同的二進位編碼, 代表會被JS視為不同
* 因此Unicode為所有字元定義了偏好的編碼, 並規範一個常態化程序(normalization procedure), 來將文字轉為一種適合用於比較的正則形式(cononical form)
* JS假設你的程式碼"已常態化過了", 因此不會進行任何常態化程序. 若你的原始碼有使用Unicode字元, 應確保已使用工具進行常態化, 以免得到得節過與實際的不同, 但肉眼無法區分.
?[選擇性的分號]
* 將語句分隔 - 增加代碼可讀性和整潔性
* 獨立行, 程序結尾, 右花括號後可不加分號
* 當前語句和下行語句無法合併並解析(parse), js會在第一行後填補分號;(有三個例外)
~   var a
~   a
~   =  
~   3
~   console.log(a)
~   解析為:
~   var a; a = 3; console,log(a)
*   例外一: return, break, continue, throw, yield 後不可換行, 若換行, 即使感覺可合併並解析, 仍會加上分號
*   例外二: ++ 或 -- 運算符, 因為可作為前綴或後綴, 換行程式碼會將其作為前綴解析
*   例外三: 箭號型函式, 必須在同一行
*/



